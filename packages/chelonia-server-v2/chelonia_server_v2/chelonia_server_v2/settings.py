"""
Django settings for chelonia_server_v2 project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+ccopz5ek@4gh-%=flvpj46bd@a2+q@4e(obr_r8&7%5nt9bn%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.environ.get("DEBUG", "false").lower() == "true" else False

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    # Django default apps
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # DRF related
    'django_filters',
    'rest_framework',

    # dj_rest_auth related
    'dj_rest_auth',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'dj_rest_auth.registration',

    # build-in apps related
    'utilities.apps.UtilitiesConfig',

    # model related apps
    'artifact.apps.ArtifactConfig',
    'tag.apps.TagConfig',
    'task.apps.TaskConfig',

    'video.apps.VideoConfig',
    'footage.apps.FootageConfig',

    'clip.apps.ClipConfig',
    'subtitle.apps.SubtitleConfig',
    'video_editor.apps.VideoEditorConfig',

    # Custom User and model permission management
    'chelonia_account.apps.CheloniaAccountConfig',
    'model_permission.apps.ModelPermissionConfig',

    # api apps
    'common_api.apps.CommonApiConfig',
    'worker_api.apps.WorkerApiConfig'
]

# Required by the django.contrib.sites, which is requirement for the dj_rest_auth
SITE_ID = 1

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_RENDERER_CLASSES': (
        'utilities.renderer.JsonDataRenderer',
    ),
    'DEFAULT_PAGINATION_CLASS': 'utilities.pagination.DataLimitOffsetPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication'
    ]
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'chelonia_server_v2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'chelonia_server_v2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get("DB_NAME", "chelonia"),
        'USER': os.environ.get("DB_USER", "Victorien"),
        'PASSWORD': os.environ.get("DB_PASS", ""),
        'HOST': os.environ.get("DB_HOST", "localhost"),
        'PORT': os.environ.get("DB_PORT", '5432'),
    }
}

# Object store related config

# Object store provider type.
# Available option are: S3,MINIO
# Default is S3
CUSTOM_OBJECT_STORE_TYPE = os.environ.get("CUSTOM_OBJECT_STORE_TYPE", "S3")
# Use custom endpoint or not
CUSTOM_OBJECT_STORE_ENDPOINT = os.environ.get("CUSTOM_OBJECT_STORE_ENDPOINT", None)
# Bucket serves as root
OBJECT_STORE_BUCKET = os.environ.get("OBJECT_STORE_BUCKET")
# How long will presign URL for upload expire
UPLOAD_EXPIRE = int(os.environ.get("UPLOAD_EXPIRE", 3600))
# How long will presign URL for view expire
VIEW_EXPIRE = int(os.environ.get("VIEW_EXPIRE", 3600))
# Export file type
EXPORT_FILE_TYPE = "mp4"


CSRF_TRUSTED_ORIGINS = ["http://localhost:3000"]
CUSTOM_OBJECT_STORE_TYPE = os.environ.get("CUSTOM_OBJECT_STORE_TYPE", "MINIO")
CUSTOM_OBJECT_STORE_ENDPOINT = os.environ.get("CUSTOM_OBJECT_STORE_ENDPOINT", "http://localhost:9000")
OBJECT_STORE_BUCKET = os.environ.get("OBJECT_STORE_BUCKET", "chelonia")
os.environ["AWS_ACCESS_KEY_ID"] = "minioadmin"
os.environ["AWS_SECRET_ACCESS_KEY"] = "minioadmin"

# Enable model permission protection or not
# Required by model_permission
MODEL_PERMISSION_ENABLED = True


# AUTH_USER_MODEL
AUTH_USER_MODEL = 'chelonia_account.User'


# dj-rest-auth configurations
# https://dj-rest-auth.readthedocs.io/en/latest/configuration.html
REST_AUTH = {
    'TOKEN_MODEL': None,
    'SESSION_LOGIN': True
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        "OPTIONS": {
            "min_length": 12
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# PASSWORD HASHERS
# https://docs.djangoproject.com/en/5.0/topics/auth/passwords/

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.ScryptPasswordHasher",
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime:s} - {levelname:s} - {module:s} - {funcName:s} - {lineno:d} - {process:d} - {thread:d}- {message:s}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            "level": LOG_LEVEL,
            'propagate': False
        },
        'root': {
            'handlers': ['console'],
            "level": LOG_LEVEL
        }
    }
}

# Worker API prefix
WORKER_API_PREFIX = "worker"

# Subtitle Generation
OPENAI_RESPONSE_FORMAT = "verbose_json"
OPENAI_TIMESTAMP_GURANULARITIES = ["word", "segment"]
