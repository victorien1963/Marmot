version: '3.7'

services:
  traefik:
    image: traefik:v2.1
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email=aws_cloud@wavenet.com.tw
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.myresolver.acme.dnsChallenge.provider=cloudflare
      - --certificatesresolvers.myresolver.acme.dnsChallenge.delayBeforeCheck=0
      # - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    labels:
      - "traefik.http.routers.http_catchall.rule=HostRegexp(`{any:.+}`)"
      - "traefik.http.routers.http_catchall.entrypoints=web"
      - "traefik.http.routers.http_catchall.middlewares=https_redirect"
      - "traefik.http.middlewares.https_redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https_redirect.redirectscheme.permanent=true"
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_API_KEY=${CF_API_KEY}
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
    container_name: "traefik"

  d-web:
    build:
      context: ./packages/d-web
    environment:
      - REACT_APP_URL=${REACT_APP_URL}
      - REACT_SERVER_URL=${REACT_SERVER_URL}
    restart: always
    ports:
      - 3000:3000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.tls.certresolver=myresolver"
      - "traefik.http.routers.app.rule=Host(`${REACT_APP_URL}`)"
      - "traefik.http.routers.app.entrypoints=websecure"
      - "traefik.http.services.app.loadbalancer.server.port=3000"
    container_name: "d-web"
    depends_on:
      - "d-server"

  d-server:
    build:
      context: ./packages/d-server
    restart: always
    ports:
      - 7001:7001
    environment: 
      - PG_HOST=${PG_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - BUCKET_NAME=${BUCKET_NAME}
    depends_on:
      - "postgres"
    container_name: "d-server"

  postgres:
    image: postgres:14.3
    restart: always
    environment: 
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${DEFAULT_DATABASE}
    volumes:
       - ./pgdata:/var/lib/postgresql/data/
    ports:
       - "5432:5432"

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio_storage:/data
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    command: server --console-address ":9001" /data
    container_name: "minio"

  common-worker:
    image: common-worker
    build:
      context: packages/common-worker
      dockerfile: "deployment/dockerfile/dev_packed/Dockerfile"
    environment:
      # API server config
      - API_SERVER_URL=${API_SERVER_URL}
      # Object store config
      - CUSTOM_OBJECT_STORE_TYPE=${CUSTOM_OBJECT_STORE_TYPE}
      - CUSTOM_OBJECT_STORE_ENDPOINT=${CUSTOM_OBJECT_STORE_ENDPOINT}
      - OBJECT_STORE_BUCKET=${OBJECT_STORE_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

  video-worker:
    image: video-worker
    build:
      context: packages/video-worker
      dockerfile: "deployment/dockerfile/dev_packed/Dockerfile"
    environment:
      # API server config
      - API_SERVER_URL=${API_SERVER_URL}
      # Object store config
      - CUSTOM_OBJECT_STORE_TYPE=${CUSTOM_OBJECT_STORE_TYPE}
      - CUSTOM_OBJECT_STORE_ENDPOINT=${MOUNT_OBJECT_STORE_ENDPOINT}
      - OBJECT_STORE_BUCKET=${OBJECT_STORE_BUCKET}
      - OBJECT_STORE_BUCKET_MOUNT_ROOT=${OBJECT_STORE_BUCKET_MOUNT_ROOT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - OPENAI_KEY=${OPENAI_API_KEY}
      - MAX_WORKERS=10
    devices:
      - "/dev/fuse"
    cap_add:
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined

  chelonia-server-v2-gunicorn:
    image: chelonia-server-v2-gunicorn
    build:
      context: packages/chelonia-server-v2
      dockerfile: "deployment/dockerfile/dev_packed/chelonia_server_v2_gunicorn/Dockerfile"
    ports:
      - 8000:8000
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_HOST: ${PG_HOST}
      DB_PORT: 5432
      DEBUG: ${DEBUG}

      OBJECT_STORE_BUCKET: ${OBJECT_STORE_BUCKET}
      UPLOAD_EXPIRE: ${UPLOAD_EXPIRE}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}

      # set if using object store other than s3
      CUSTOM_OBJECT_STORE_TYPE: ${CUSTOM_OBJECT_STORE_TYPE}
      CUSTOM_OBJECT_STORE_ENDPOINT: ${CUSTOM_OBJECT_STORE_ENDPOINT}

      # super user account
      SUPER_USER: $SUPER_USER
      SUPER_USER_PASSWD: $SUPER_USER_PASSWD

  whisper-api-server-gunicorn:
    image: whisper-api-server-gunicorn
    build:
      context: ./packages/whisper-api-server
      dockerfile: "deployment/dockerfile/dev_packed/whisper_api_server_gunicorn/Dockerfile"
    restart: always
    environment:
      - DB_NAME=${WHISPER_DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_HOST=${PG_HOST}
      - DB_PORT=${PG_PORT}
      - DEBUG=${DEBUG}

  whisper-api-worker:
    image: whisper-api-worker
    build:
      context: ./packages/whisper-api-worker
      dockerfile: "deployment/dockerfile/dev_model_preload_packed/whisper_api_worker/Dockerfile"
    environment:
      WHISPER_MODEL_PATH: /model
      WHISPER_API_SERVER_URL: http://whisper-api-server-gunicorn:8000
      BUCKET_NAME: ${BUCKET_NAME}
      BUCKET_MOUNT_ROOT: ${BUCKET_MOUNT_ROOT}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      # Not required if bucket is on S3
      CUSTOM_BUCKET_ENDPOINT: ${MOUNT_OBJECT_STORE_ENDPOINT}
      DEVICE_TYPE: ${DEVICE_TYPE}
      # BOOT connection test
      # Total retry times. Default: 60
      # BOOT_RETRY_TIMES: 60
      # Time to wait between each connection retry. Default: 1, Unit: second
      # BOOT_RETRY_WAIT: 1
    volumes:
      - ./model:/model
    devices:
      - "/dev/fuse"
    cap_add:
      - SYS_ADMIN
    depends_on:
      - whisper-api-server-gunicorn
      - chelonia-postgres
      - minio
    security_opt:
      - apparmor:unconfined
